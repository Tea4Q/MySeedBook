name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint || true  # Allow to continue even if linting fails
    
    - name: Run TypeScript check
      run: npx tsc --noEmit
    
    - name: Check for production security issues
      run: |
        echo "Checking for development/debug code in production..."
        if grep -r "console\.log\|console\.debug\|alert(" app/ components/ --exclude-dir=node_modules || true; then
          echo "‚ö†Ô∏è  Found debug code - review before production deployment"
        fi
        if grep -r "byPass\|bypass\|BYPASS" app/ components/ --exclude-dir=node_modules || true; then
          echo "‚ùå Found bypass flags - remove before production!"
          exit 1
        fi
        if grep -r "TODO\|FIXME\|XXX" app/ components/ --exclude-dir=node_modules || true; then
          echo "‚ÑπÔ∏è  Found TODO items - consider addressing"
        fi
    
    - name: Validate environment configuration
      run: |
        echo "Validating production configuration..."
        if [ ! -f "app.json" ]; then
          echo "‚ùå app.json missing!"
          exit 1
        fi
        if [ ! -f "eas.json" ]; then
          echo "‚ùå eas.json missing!"
          exit 1
        fi
        echo "‚úÖ Configuration files found"

  expo-doctor:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Expo CLI
      run: npm install -g @expo/cli@latest
    
    - name: Run Expo Doctor
      run: npx expo doctor

  build-preview:
    runs-on: ubuntu-latest
    needs: [test, expo-doctor]
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup Expo and EAS
      uses: expo/expo-github-action@v8
      with:
        eas-version: latest
        token: ${{ secrets.EXPO_TOKEN }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build preview
      run: |
        echo "Building preview for PR..."
        # eas build --platform android --profile preview --non-interactive
        echo "Preview build would run here with proper Expo configuration"

  production-security-check:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Final Production Security Scan
      run: |
        echo "üîí Final security scan for production deployment..."
        
        # Check for authentication bypasses
        if grep -r -i "bypass.*auth\|auth.*bypass" app/ components/ lib/ --exclude-dir=node_modules; then
          echo "‚ùå CRITICAL: Authentication bypass found!"
          exit 1
        fi
        
        # Check for hardcoded credentials
        if grep -r -E "(password|secret|key|token)\s*[:=]\s*['\"][^'\"]{3,}" app/ components/ lib/ --exclude-dir=node_modules || true; then
          echo "‚ö†Ô∏è  Potential hardcoded credentials found - verify these are not sensitive"
        fi
        
        # Check for test/development URLs
        if grep -r -E "(localhost|127\.0\.0\.1|test|dev|staging)" app/ components/ lib/ --exclude-dir=node_modules || true; then
          echo "‚ÑπÔ∏è  Development URLs found - ensure production URLs are configured"
        fi
        
        echo "‚úÖ Security scan completed"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, expo-doctor, production-security-check]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup Expo and EAS
      uses: expo/expo-github-action@v8
      with:
        eas-version: latest
        token: ${{ secrets.EXPO_TOKEN }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Deploy to Production
      run: |
        echo "üöÄ Deploying to production..."
        # eas build --platform all --profile production --non-interactive
        # eas submit --platform all --latest
        echo "Production deployment would run here with proper Expo configuration"
        echo "Ensure EXPO_TOKEN is set in repository secrets"
